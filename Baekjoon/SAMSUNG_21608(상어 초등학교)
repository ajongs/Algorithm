import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

class Main {
    static int[][] map;
    static List<int[]> list = new ArrayList<>();
    static int n;
    static int[] dr = {-1,1,0,0};
    static int[] dc = {0,0,-1,1};
    static ArrayList<Integer>[] info;
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        map = new int[n][n];
        info = new ArrayList[n*n+1];
        for(int i=1; i<n*n+1; i++){
            info[i] = new ArrayList<>();
        }

        for(int i=0; i<n*n; i++){
            String[] str = br.readLine().split(" ");
            int student = Integer.parseInt(str[0]);
            int[] list = new int[4];
            for(int j=1; j<5; j++){
                list[j-1] = Integer.parseInt(str[j]);
                info[student].add(list[j-1]);
            }
            arrange(student, list);
        }


        System.out.println(satisfaction());

    }
    private static int satisfaction(){
        int sum =0;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){

                int like=0;
                int student = map[i][j];

                for(int k=0; k<4; k++){
                    int nextR = i + dr[k];
                    int nextC = j + dc[k];

                    if(nextR >=0 && nextR <n && nextC >=0 && nextC <n){
                        int nearP = map[nextR][nextC];
                        if(info[student].contains(nearP)) like++;
                    }
                }
                if(like == 0 || like == 1){
                    sum += like;
                }else if(like == 2){
                    sum += 10;
                }else if(like == 3){
                    sum += 100;
                }else if(like == 4){
                    sum += 1000;
                }
            }
        }
        return sum;
    }
    private static void arrange(int student, int[] list){
        //1. 빈칸 중 좋아하는 학생이 많은 칸 확인
        PriorityQueue<Position> pq = new PriorityQueue<>();
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(map[i][j] !=0 ){
                    continue;
                }
                //비어있는 칸 조사
                //좋아하는 학생 수 조사
                pq.offer(search(i,j,list));
            }
        }
        Position position = pq.poll();
        map[position.r][position.c] = student;

    }
    private static Position search(int r, int c, int[] list){
        int empty=0;
        int like=0;
        for(int i=0; i<4; i++){
            int nextR = r + dr[i];
            int nextC = c + dc[i];

            if(nextR >=0 && nextR <n && nextC >=0 && nextC <n){
                if(map[nextR][nextC] == 0){
                    empty++;
                }
                else{
                    for(int j=0; j<list.length; j++){
                        if(map[nextR][nextC] == list[j])
                            like++;
                    }
                }
            }
        }
        return new Position(r,c,like,empty);
    }
}
class Position implements Comparable{
    int r;
    int c;
    int like;
    int empty;

    public Position(int r, int c, int like, int empty){
        this.r = r;
        this.c = c;
        this.like = like;
        this.empty = empty;
    }

    @Override
    public int compareTo(Object o){
        Position o1 = (Position) o;
        if(this.like == o1.like){
            if(this.empty == o1.empty){
                if(this.r == o1.r){
                    return this.c - this.c;
                }
                return this.r - o1.r;
            }
            return o1.empty - this.empty;
        }
        return o1.like - this.like;
    }

}
